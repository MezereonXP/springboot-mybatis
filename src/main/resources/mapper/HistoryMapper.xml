<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.spring.springboot.dao.HistoryMapper">
    <resultMap id="BaseResultMap" type="org.spring.springboot.domain.History">
        <id column="historyId" jdbcType="INTEGER" property="historyId"/>
        <result column="sampleId" jdbcType="INTEGER" property="sampleId"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="date" jdbcType="TIMESTAMP" property="date"/>
        <result column="ipAddress" jdbcType="VARCHAR" property="ipAddress"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.spring.springboot.domain.History">
        <result column="adminComment" jdbcType="LONGVARCHAR" property="adminComment"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    historyId, sampleId, status, date, ipAddress
  </sql>
    <sql id="Blob_Column_List">
    adminComment
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="org.spring.springboot.domain.HistoryExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="org.spring.springboot.domain.HistoryExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from history
        where historyId = #{historyId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from history
    where historyId = #{historyId,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="org.spring.springboot.domain.HistoryExample">
        delete from history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="org.spring.springboot.domain.History">
    insert into history (historyId, sampleId, status, 
      date, ipAddress, adminComment
      )
    values (#{historyId,jdbcType=INTEGER}, #{sampleId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{date,jdbcType=TIMESTAMP}, #{ipAddress,jdbcType=VARCHAR}, #{adminComment,jdbcType=LONGVARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="org.spring.springboot.domain.History">
        insert into history
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="historyId != null">
                historyId,
            </if>
            <if test="sampleId != null">
                sampleId,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="date != null">
                date,
            </if>
            <if test="ipAddress != null">
                ipAddress,
            </if>
            <if test="adminComment != null">
                adminComment,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="historyId != null">
                #{historyId,jdbcType=INTEGER},
            </if>
            <if test="sampleId != null">
                #{sampleId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="date != null">
                #{date,jdbcType=TIMESTAMP},
            </if>
            <if test="ipAddress != null">
                #{ipAddress,jdbcType=VARCHAR},
            </if>
            <if test="adminComment != null">
                #{adminComment,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="org.spring.springboot.domain.HistoryExample" resultType="java.lang.Long">
        select count(*) from history
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update history
        <set>
            <if test="record.historyId != null">
                historyId = #{record.historyId,jdbcType=INTEGER},
            </if>
            <if test="record.sampleId != null">
                sampleId = #{record.sampleId,jdbcType=INTEGER},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=INTEGER},
            </if>
            <if test="record.date != null">
                date = #{record.date,jdbcType=TIMESTAMP},
            </if>
            <if test="record.ipAddress != null">
                ipAddress = #{record.ipAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.adminComment != null">
                adminComment = #{record.adminComment,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update history
        set historyId = #{record.historyId,jdbcType=INTEGER},
        sampleId = #{record.sampleId,jdbcType=INTEGER},
        status = #{record.status,jdbcType=INTEGER},
        date = #{record.date,jdbcType=TIMESTAMP},
        ipAddress = #{record.ipAddress,jdbcType=VARCHAR},
        adminComment = #{record.adminComment,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update history
        set historyId = #{record.historyId,jdbcType=INTEGER},
        sampleId = #{record.sampleId,jdbcType=INTEGER},
        status = #{record.status,jdbcType=INTEGER},
        date = #{record.date,jdbcType=TIMESTAMP},
        ipAddress = #{record.ipAddress,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="org.spring.springboot.domain.History">
        update history
        <set>
            <if test="sampleId != null">
                sampleId = #{sampleId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="date != null">
                date = #{date,jdbcType=TIMESTAMP},
            </if>
            <if test="ipAddress != null">
                ipAddress = #{ipAddress,jdbcType=VARCHAR},
            </if>
            <if test="adminComment != null">
                adminComment = #{adminComment,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where historyId = #{historyId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.spring.springboot.domain.History">
    update history
    set sampleId = #{sampleId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      date = #{date,jdbcType=TIMESTAMP},
      ipAddress = #{ipAddress,jdbcType=VARCHAR},
      adminComment = #{adminComment,jdbcType=LONGVARCHAR}
    where historyId = #{historyId,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="org.spring.springboot.domain.History">
    update history
    set sampleId = #{sampleId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      date = #{date,jdbcType=TIMESTAMP},
      ipAddress = #{ipAddress,jdbcType=VARCHAR}
    where historyId = #{historyId,jdbcType=INTEGER}
  </update>
</mapper>