<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.spring.springboot.dao.TeamDao">
  <resultMap id="BaseResultMap" type="org.spring.springboot.domain.Team">
    <id column="teamId" jdbcType="INTEGER" property="teamId"/>
    <result column="universityId" jdbcType="INTEGER" property="universityId"/>
    <result column="teamName" jdbcType="VARCHAR" property="teamName"/>
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="priority" jdbcType="INTEGER" property="priority"/>
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="lastLoginTime" jdbcType="TIMESTAMP" property="lastLoginTime"/>
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.spring.springboot.domain.Team">
    <result column="details" jdbcType="LONGVARCHAR" property="details"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    teamId, universityId, teamName, email, password, priority, createTime, lastLoginTime, 
    updateTime
  </sql>
  <sql id="Blob_Column_List">
    details
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="org.spring.springboot.domain.TeamExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List"/>
    ,
    <include refid="Blob_Column_List"/>
    from team
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="org.spring.springboot.domain.TeamExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List"/>
    from team
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from team
    where teamId = #{teamId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from team
    where teamId = #{teamId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.spring.springboot.domain.TeamExample">
    delete from team
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="org.spring.springboot.domain.Team">
    insert into team (teamId, universityId, teamName, 
      email, password, priority, 
      createTime, lastLoginTime, updateTime, 
      details)
    values (#{teamId,jdbcType=INTEGER}, #{universityId,jdbcType=INTEGER}, #{teamName,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{priority,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{lastLoginTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{details,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.spring.springboot.domain.Team">
    insert into team
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="teamId != null">
        teamId,
      </if>
      <if test="universityId != null">
        universityId,
      </if>
      <if test="teamName != null">
        teamName,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="priority != null">
        priority,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="lastLoginTime != null">
        lastLoginTime,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
      <if test="details != null">
        details,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="teamId != null">
        #{teamId,jdbcType=INTEGER},
      </if>
      <if test="universityId != null">
        #{universityId,jdbcType=INTEGER},
      </if>
      <if test="teamName != null">
        #{teamName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        #{priority,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="details != null">
        #{details,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.spring.springboot.domain.TeamExample" resultType="java.lang.Long">
    select count(*) from team
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update team
    <set>
      <if test="record.teamId != null">
        teamId = #{record.teamId,jdbcType=INTEGER},
      </if>
      <if test="record.universityId != null">
        universityId = #{record.universityId,jdbcType=INTEGER},
      </if>
      <if test="record.teamName != null">
        teamName = #{record.teamName,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.priority != null">
        priority = #{record.priority,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastLoginTime != null">
        lastLoginTime = #{record.lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.details != null">
        details = #{record.details,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update team
    set teamId = #{record.teamId,jdbcType=INTEGER},
      universityId = #{record.universityId,jdbcType=INTEGER},
      teamName = #{record.teamName,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      priority = #{record.priority,jdbcType=INTEGER},
    createTime = #{record.createTime,jdbcType=TIMESTAMP},
    lastLoginTime = #{record.lastLoginTime,jdbcType=TIMESTAMP},
    updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      details = #{record.details,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update team
    set teamId = #{record.teamId,jdbcType=INTEGER},
      universityId = #{record.universityId,jdbcType=INTEGER},
      teamName = #{record.teamName,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
    priority = #{record.priority,jdbcType=INTEGER},
    createTime = #{record.createTime,jdbcType=TIMESTAMP},
    lastLoginTime = #{record.lastLoginTime,jdbcType=TIMESTAMP},
    updateTime = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.spring.springboot.domain.Team">
    update team
    <set>
      <if test="universityId != null">
        universityId = #{universityId,jdbcType=INTEGER},
      </if>
      <if test="teamName != null">
        teamName = #{teamName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="priority != null">
        priority = #{priority,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        lastLoginTime = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="details != null">
        details = #{details,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where teamId = #{teamId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.spring.springboot.domain.Team">
    update team
    set universityId = #{universityId,jdbcType=INTEGER},
      teamName = #{teamName,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      lastLoginTime = #{lastLoginTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP},
      details = #{details,jdbcType=LONGVARCHAR}
    where teamId = #{teamId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.spring.springboot.domain.Team">
    update team
    set universityId = #{universityId,jdbcType=INTEGER},
      teamName = #{teamName,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      lastLoginTime = #{lastLoginTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP}
    where teamId = #{teamId,jdbcType=INTEGER}
  </update>
</mapper>