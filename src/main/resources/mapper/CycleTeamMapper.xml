<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.spring.springboot.dao.CycleTeamDao">
  <resultMap id="BaseResultMap" type="org.spring.springboot.domain.CycleTeam">
    <id column="cycleTeamId" jdbcType="INTEGER" property="cycleTeamId"/>
    <result column="testCycleId" jdbcType="INTEGER" property="testCycleId"/>
    <result column="teamId" jdbcType="INTEGER" property="teamId"/>
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.spring.springboot.domain.CycleTeamWithBLOBs">
    <result column="report" jdbcType="LONGVARCHAR" property="report"/>
    <result column="cycleTeamDescription" jdbcType="LONGVARCHAR" property="cycleTeamDescription"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    cycleTeamId, testCycleId, teamId, createTime, updateTime
  </sql>
  <sql id="Blob_Column_List">
    report, cycleTeamDescription
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="org.spring.springboot.domain.CycleTeamExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List"/>
    ,
    <include refid="Blob_Column_List"/>
    from cycleteam
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="org.spring.springboot.domain.CycleTeamExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List"/>
    from cycleteam
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cycleteam
    where cycleTeamId = #{cycleTeamId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from cycleteam
    where cycleTeamId = #{cycleTeamId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.spring.springboot.domain.CycleTeamExample">
    delete from cycleteam
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="org.spring.springboot.domain.CycleTeamWithBLOBs">
    insert into cycleteam (cycleTeamId, testCycleId, teamId, 
      createTime, updateTime, report, 
      cycleTeamDescription)
    values (#{cycleTeamId,jdbcType=INTEGER}, #{testCycleId,jdbcType=INTEGER}, #{teamId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{report,jdbcType=LONGVARCHAR}, 
      #{cycleTeamDescription,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.spring.springboot.domain.CycleTeamWithBLOBs">
    insert into cycleteam
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cycleTeamId != null">
        cycleTeamId,
      </if>
      <if test="testCycleId != null">
        testCycleId,
      </if>
      <if test="teamId != null">
        teamId,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
      <if test="updateTime != null">
        updateTime,
      </if>
      <if test="report != null">
        report,
      </if>
      <if test="cycleTeamDescription != null">
        cycleTeamDescription,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cycleTeamId != null">
        #{cycleTeamId,jdbcType=INTEGER},
      </if>
      <if test="testCycleId != null">
        #{testCycleId,jdbcType=INTEGER},
      </if>
      <if test="teamId != null">
        #{teamId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="report != null">
        #{report,jdbcType=LONGVARCHAR},
      </if>
      <if test="cycleTeamDescription != null">
        #{cycleTeamDescription,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.spring.springboot.domain.CycleTeamExample" resultType="java.lang.Long">
    select count(*) from cycleteam
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update cycleteam
    <set>
      <if test="record.cycleTeamId != null">
        cycleTeamId = #{record.cycleTeamId,jdbcType=INTEGER},
      </if>
      <if test="record.testCycleId != null">
        testCycleId = #{record.testCycleId,jdbcType=INTEGER},
      </if>
      <if test="record.teamId != null">
        teamId = #{record.teamId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.report != null">
        report = #{record.report,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.cycleTeamDescription != null">
        cycleTeamDescription = #{record.cycleTeamDescription,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update cycleteam
    set cycleTeamId = #{record.cycleTeamId,jdbcType=INTEGER},
    testCycleId = #{record.testCycleId,jdbcType=INTEGER},
    teamId = #{record.teamId,jdbcType=INTEGER},
    createTime = #{record.createTime,jdbcType=TIMESTAMP},
    updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
    report = #{record.report,jdbcType=LONGVARCHAR},
    cycleTeamDescription = #{record.cycleTeamDescription,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update cycleteam
    set cycleTeamId = #{record.cycleTeamId,jdbcType=INTEGER},
    testCycleId = #{record.testCycleId,jdbcType=INTEGER},
    teamId = #{record.teamId,jdbcType=INTEGER},
    createTime = #{record.createTime,jdbcType=TIMESTAMP},
    updateTime = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.spring.springboot.domain.CycleTeamWithBLOBs">
    update cycleteam
    <set>
      <if test="testCycleId != null">
        testCycleId = #{testCycleId,jdbcType=INTEGER},
      </if>
      <if test="teamId != null">
        teamId = #{teamId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="report != null">
        report = #{report,jdbcType=LONGVARCHAR},
      </if>
      <if test="cycleTeamDescription != null">
        cycleTeamDescription = #{cycleTeamDescription,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where cycleTeamId = #{cycleTeamId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.spring.springboot.domain.CycleTeamWithBLOBs">
    update cycleteam
    set testCycleId = #{testCycleId,jdbcType=INTEGER},
      teamId = #{teamId,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP},
      report = #{report,jdbcType=LONGVARCHAR},
      cycleTeamDescription = #{cycleTeamDescription,jdbcType=LONGVARCHAR}
    where cycleTeamId = #{cycleTeamId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.spring.springboot.domain.CycleTeam">
    update cycleteam
    set testCycleId = #{testCycleId,jdbcType=INTEGER},
      teamId = #{teamId,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updateTime = #{updateTime,jdbcType=TIMESTAMP}
    where cycleTeamId = #{cycleTeamId,jdbcType=INTEGER}
  </update>
</mapper>